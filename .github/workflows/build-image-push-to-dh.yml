# This is a basic workflow to help you get started with Actions

name: Deploy to ECS

# Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_run:
    workflows: ["Node.js CI"]
    branches: ["master"]
    types:
      - completed
jobs:
  deploy-on-ecs:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      ECS_CLUSTER_NAME: EcsAlardinBackendCluter
      ECR_REPOSITORY_NAME: alardin-back
      ECS_CONTAINER_NAME: ecs-alardin-backend-container
      ECS_SERVICE_NAME: ECSAlardinBackendService
      TASK_DEFINITION_NAME: ECSAlardinBackendTD

    steps:
    - uses: actions/checkout@v3

    - name: Write to Firebase account file
      env:
        FIREBASE_ACCOUNT: ${{ secrets.FIREBASE_ACCOUNT }}
      run: echo "$FIREBASE_ACCOUNT" > ./firebase/service-account.json
      shell: bash

    - name: Write to DocumentDB CA
      env:
        DOCUMENTDB_CA: ${{ secrets.DOCUMENTDB_CA }}
      run: echo "$DOCUMENTDB_CA" > ./rds-combined-ca-bundle.pem
      shell: bash

    - name: Appspec.yml 
      run: mv appspec.deploy.yml appspec.yaml
      shell: bash

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: alardin-back
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true